@page "/localizations"

@using LocalizationManager.Transfer.Application
@using LocalizationManager.Transfer.LocalizationDtos
@using LocalizationManager.Web.Client
@using LocalizationManager.Web.Components
@using LocalizationManager.Web.Options
@using Microsoft.AspNetCore.Authorization

@inject ILocalizationClient LocalizationClient
@inject IApplicationClient ApplicationClient
@inject IDialogService DialogService

@attribute [Authorize]

<PageTitle>Localizations</PageTitle>

<MudTable T="LocalizationValueDto" Items="_localizationValues" Dense Bordered Striped>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Localization Values</MudText>
        <MudSpacer />
        
        <div style="width: 300px;" class="mr-5">
            <MudSelect T="int" Label="Select Application" Variant="Variant.Outlined" Value="selectedAppId" ValueChanged="OnApplicationSelected">
                @foreach (var app in _registeredApplications)
                {
                    <MudSelectItem T="int" Value="app.Id">
                        @app.AppName
                    </MudSelectItem>
                }
            </MudSelect>
        </div>

        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@AddLocalizationValue">
            Add new localization value
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="width: 5%;">Language</MudTh>
        <MudTh Style="width: 20%;">Key</MudTh>
        <MudTh Style="width: 65%;">Value</MudTh>
        <MudTh Style="width: 5%;"></MudTh>
        <MudTh Style="width: 5%;"></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.LanguageCode</MudTd>
        <MudTd>@context.Key</MudTd>
        <MudTd>@context.Value</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" Class="mr-2" OnClick="@(() => EditLocalizationValueAsync(context))" />
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteLocalizationValueAsync(context))" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IList<LocalizationValueDto> _localizationValues = [];

    private IList<ApplicationDto> _registeredApplications = [];

    private int selectedAppId = 0;

    protected override async Task OnInitializedAsync()
    {
        _registeredApplications = await ApplicationClient.GetRegisteredApplicationsAsync();

        if (_registeredApplications.Count == 0) { return; }

        selectedAppId = _registeredApplications.First().Id;

        await LoadDataAsync();

        await base.OnInitializedAsync();
    }

    private async Task LoadDataAsync()
    {
        if(selectedAppId == 0) { return; }

        _localizationValues = await LocalizationClient.GetLocalizationValuesAsync(selectedAppId);

        _localizationValues.OrderBy(x => x.Key).ThenBy(x => x.LanguageCode).ToList();

        StateHasChanged();
    }

    private async Task OnApplicationSelected(int selectedAppId)
    {
        this.selectedAppId = selectedAppId;

        await LoadDataAsync();
    } 

    private async Task AddLocalizationValue()
    {
        var parameters = new DialogParameters<AddOrEditLocalizationComponent>();

        var result = await (await DialogService.ShowAsync<AddOrEditLocalizationComponent>(
            "Add new localization value",
            parameters,
            MudDialogOptions.LocalizationDialogOptions)).Result;

        await LoadDataAsync();
    }

    private async Task EditLocalizationValueAsync(LocalizationValueDto item)
    {
        var parameters = new DialogParameters<AddOrEditLocalizationComponent>();

        parameters.Add(x => x.LocalizationValue, item);

        var result = await (await DialogService.ShowAsync<AddOrEditLocalizationComponent>(
            "Edit localization value",
            parameters,
            MudDialogOptions.LocalizationDialogOptions)).Result;

        await LoadDataAsync();
    }

    private async Task DeleteLocalizationValueAsync(LocalizationValueDto item)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete value",
            "Are you sure, you want to delete the localization?",
            yesText: "Yes", noText: "Cancel"
        );

        if (!(result.HasValue && result.Value))
            return;

        // TODO
    }
}
