@page "/applications"

@using LocalizationManager.Transfer.Application;
@using LocalizationManager.Web.Client;
@using LocalizationManager.Web.Components
@using LocalizationManager.Web.Options
@using Microsoft.AspNetCore.Authorization

@inject IApplicationClient ApplicationClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@attribute [Authorize]

<MudTable T="ApplicationDto" Items="_applications" Hover="true" Bordered="true" Elevation="1" Loading="IsLoading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Applications</MudText>

        <MudSpacer />

        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" Variant="Variant.Text" Class="mr-3" OnClick="@LoadDataAsync">
            Refresh data
        </MudIconButton>

        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@AddApplicationAsync">
            Register new application
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="width: 30%">App ID</MudTh>
        <MudTh Style="width: 40%">App Name</MudTh>
        <MudTh Style="width: 20%">Supported Languages</MudTh>
        <MudTh Style="width: 5%" />
        <MudTh Style="width: 5%" />
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="App Id">@context.AppId</MudTd>
        <MudTd DataLabel="App Name">@context.AppName</MudTd>
        <MudTd DataLabel="Supported Languages">
            @foreach (var lang in @context.SupportedLanguages)
            {
                <MudChip T="string" Color="Color.Primary" Style="margin-right:5px">@lang</MudChip>
            }
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" Class="mr-2"
                OnClick="@(async () => await EditApplicationAsync(context))" />
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                           OnClick="@(async () => await DeleteApplicationAsync(context))" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IList<ApplicationDto> _applications = [];

    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();

        await base.OnInitializedAsync();
    }

    private async Task LoadDataAsync()
    {
        IsLoading = true;

        try
        {
            _applications = await ApplicationClient.GetRegisteredApplicationsAsync();
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to load data", Severity.Error);
        }

        IsLoading = false;

        StateHasChanged();
    }

    private async Task AddApplicationAsync()
    {
        var parameters = new DialogParameters<AddOrEditApplicationComponent>();

        var result = await (await DialogService.ShowAsync<AddOrEditApplicationComponent>(
            "Register new application",
            parameters,
            MudDialogOptions.LocalizationDialogOptions)).Result;

        await LoadDataAsync();
    }

    private async Task EditApplicationAsync(ApplicationDto dto)
    {
        var parameters = new DialogParameters<AddOrEditApplicationComponent>();

        parameters.Add(x => x.application, dto);

        var result = await (await DialogService.ShowAsync<AddOrEditApplicationComponent>(
            "Edit application data",
            parameters,
            MudDialogOptions.LocalizationDialogOptions)).Result;

        await LoadDataAsync();
    }

    private async Task DeleteApplicationAsync(ApplicationDto dto)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete application",
            "Are you sure, you want to delete the application?",
            yesText: "Yes", noText: "Cancel"
        );

        if (!(result.HasValue && result.Value))
            return;

        try
        {
            await ApplicationClient.DeleteApplicationAsync(dto);

            Snackbar.Add("Successfully deleted application!", Severity.Success);
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to delete application!", Severity.Error);
        }

        await LoadDataAsync();
    }
}